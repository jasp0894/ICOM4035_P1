package experimentalClasses;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Random;

import strategyClasses.FrequencyCounter;
import strategyClasses.MapFD;
import strategyClasses.OrderedFD;
import strategyClasses.SequentialFD;

/**
 * Executes the experiments that estimate the execution time (in milliseconds) for the three
 * strategies depending on the dataset size.
 * 
 * @author J.A. Sanchez Perez
 *
 */
public class ExperimentalTrials {

	public static void main(String[] args) {
		int initialDataSetSize = 50;
		int maxDataSetSize = 1000;
		int sizeSteps = 50;
		int trials = 200;

		startExperiment(new OrderedFD<>(), initialDataSetSize, maxDataSetSize, sizeSteps, trials);
		startExperiment(new SequentialFD<>(), initialDataSetSize, maxDataSetSize, sizeSteps, trials);
		startExperiment(new MapFD<>(), initialDataSetSize, maxDataSetSize, sizeSteps, trials);

	}

	//this list will hold the pairs (Input Size, Execution Time) as a result of each experiment
	public static ArrayList<Pair<Integer, Float>> dataPlot = new ArrayList<>();

	/**
	 * Starts the experiment to estimate the execution time of three Frequency
	 * Distribution calculator strategies. Since the execution time is a
	 * function of input data size, a Time vs Input Size is generated by means
	 * of incrementing the size of the data by steps.
	 * 
	 * @param freqCounter
	 *            Frequency distribution strategy implementer object
	 * @param initialDataSize
	 *            initial size for the dataset to be tested
	 * @param maxDataSize
	 *            maximum allowable size for the dataset to be tested
	 * @param step
	 *            value of the incremental step for the dataset size
	 * @param trialsPerExp
	 *            number of trial per each experiment for a particular dataset
	 *            size
	 */
	public static void startExperiment(FrequencyCounter<Integer> freqCounter, int initialDataSize, int maxDataSize,
			int step, int trialsPerExp) {
		
		int plotNumber = 0;    //indicates the number of plots generated so far. 
		for (int i = initialDataSize; i <= maxDataSize; i = i + step) {
			//Adds a new pair to the data plot. The pair consist of the current size and the result of performTrials
			dataPlot.add(new Pair<>(i, performTrials(freqCounter, i, trialsPerExp) / trialsPerExp));
			System.out.println(dataPlot.get(plotNumber));

			plotNumber++;
		}
		printToFile(freqCounter, dataPlot);
		dataPlot.clear(); //clear all plots for the current frequency counter
	}

	// perform the number of trials given by trials variable. The execution time
	// of individual trials is saved into a
	// total execution time variable and then returned
	private static float performTrials(FrequencyCounter<Integer> freqCounter, int dataSize, int trials) {
		float trialsExecutionTime = 0;
		Random rand = new Random(); //to generate random number to fill in the data sets
		
		//peforms trials
		//at each trial a new data set is created (new data)
		//the strategy is test trials times and with different data at each trial.
		for (int i = 0; i < trials; i++) {
			ArrayList<Integer> dataSet = new ArrayList<>();
			//fill the data set with random data for the experiments. 
			for (int j = 0; j < dataSize; j++)
				dataSet.add(rand.nextInt(dataSize / 2));
			
			long startTime = System.currentTimeMillis();
			freqCounter.computeFDList(dataSet);  //tests the strategy
			long endTime = System.currentTimeMillis() - startTime;
			//add the execution time of the current trial to the global variable
			trialsExecutionTime += endTime;
		}
		return trialsExecutionTime;
	}

	// outputs the result (data plot) to a .txt file
	private static void printToFile(FrequencyCounter<Integer> freqCounter, ArrayList<Pair<Integer, Float>> plot) {
		PrintWriter writer;
		try {
			String fName = "experimentalResults" + File.separator + "results" + freqCounter.getname() + ".txt";
			writer = new PrintWriter(new File(fName));
			for (Pair<Integer, Float> p : plot)
				writer.println(p);

			writer.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	/**
	 * An instance of Pair holds a pair of two objects. This is used to the Time
	 * Vs. input plot.
	 * 
	 * @author J.A. Sanchez Perez
	 *
	 * @param <N>
	 *            Reference to object of type N.
	 * @param <T>
	 *            Reference to object of type T
	 */
	private static class Pair<N, T> {
		private N n;
		private T t;

		public Pair(N n, T t) {
			this.n = n;
			this.t = t;
		}

		@Override
		public String toString() {
			// TODO Auto-generated method stub
			return (this.n + "\t" + this.t);
		}
	}
}
